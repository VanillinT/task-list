{"version":3,"sources":["features/notifications/notificationsSlice.js","features/notifications/Notifier.jsx","utils/api.js","utils/helpers.js","features/tasksList/taskModalSlice.js","features/tasksList/tasksSlice.js","utils/validators.js","features/tasksList/styles.jsx","features/formWithValidation/styles.jsx","features/formWithValidation/FormWithValidation.jsx","features/tasksList/AddTaskModal.jsx","features/auth/userInfoSlice.js","features/tasksList/tasksListStateSlice.js","features/tasksList/config.js","features/tasksList/TasksList.jsx","features/auth/LoginPopover.jsx","commonComponents/styles.jsx","commonComponents/Header.jsx","commonComponents/App.jsx","app/store.js","index.jsx"],"names":["notificationsSlice","createSlice","name","initialState","items","reducers","notificationAdded","state","payload","push","notificationRemoved","filter","notification","key","actions","displayed","Notifier","dispatch","useDispatch","notifications","useSelector","store","useSnackbar","enqueueSnackbar","closeSnackbar","useEffect","forEach","id","message","options","dismissed","includes","onClose","event","reason","myKey","onExited","fetchAsDev","a","method","path","params","data","url","Object","entries","val","ajax","crossDomain","mimeType","contentType","processData","dataType","response","get","post","form","FormData","append","getTasks","page","editMultipleTasks","tasks","token","Promise","all","map","task","editTask","dispatchNotificationForResult","result","_message","resultIsArray","length","success","status","resultMessage","JSON","stringify","Date","getTime","Math","random","variant","getTokenFromCookie","document","cookie","split","find","row","trim","startsWith","putTokenInCookie","modalSlice","open","modalOpened","modalClosed","fetchTasks","createAsyncThunk","getState","tasksListState","orderBy","sortDirection","currentPage","sort_field","sort_direction","newTaskCreated","processedTask","text","then","res","tasksSaved","unsavedItems","processedItems","itemsCount","tasksSlice","error","totalItems","taskEditedLocally","errorNullified","extraReducers","fulfilled","total_task_count","every","msg","selectTasksData","count","selectUnsavedTasks","validateEmail","_email","test","validateUsername","username","validateText","errormsg","useAddTaskModalStyles","makeStyles","modal","display","alignItems","justifyContent","wrapper","outline","useTasksListStyles","tableContainer","height","tableBody","position","utilsWrapper","width","padding","margin","button","marginRight","pagination","textField","border","useFormStyles","theme","background","borderRadius","minWidth","boxShadow","shadows","header","backgroundColor","palette","secondary","light","body","flexDirection","input","marginTop","backdrop","FormWithValidation","submitButtonLabel","title","fieldsOptionsMap","onSubmit","errors","styles","fieldsKeys","useMemo","keys","getEmptyFieldsMap","reduce","acc","useState","fieldsValuesMap","setFieldsValuesMap","errorsMap","setErrorsMap","updatePrevStateObj","setFn","value","prev","handleTextInputChange","e","preventDefault","setFieldValue","target","getFormErrorsCount","validate","validator","currentValue","errorText","setErrorValue","FormControl","className","TextField","label","capitalize","onChange","props","getCustomPropsForInput","Button","onClick","AddTaskModal","newTaskModal","email","multiline","rows","rowsMax","Modal","closeAfterTransition","Fade","in","Box","loggedIn","fetchToken","userInfoSlice","loggedOut","selectLoggedIn","user","listStateSlice","orderByChanged","sortDirectionChanged","currentPageChanged","selectTaskListState","headers","sortable","getStatus","edited","done","getDoubleDigitStatus","String","getNewStatus","newStatus","Number","getTaskInfoFromStatus","doubleDigitStatus","TasksList","unsavedTasks","pageCount","ceil","updateUnsavedTask","endIcon","Pagination","shape","TableContainer","Table","TableHead","TableRow","cell","TableCell","TableSortLabel","active","direction","TableBody","disabled","handleTextChange","Checkbox","checked","handleCheckboxClick","LoginPopover","anchorEl","password","type","undefined","Popover","anchorOrigin","vertical","horizontal","transformOrigin","useAppStyles","paddingTop","fontSize","useHeaderStyles","logo","pointerEvents","Header","loginPopover","React","setAnchorEl","loginPopoverOpen","setLoginPopoverOpen","Typography","disableRipple","currentTarget","App","configureStore","reducer","tasksReducer","tasksListStateSlice","taskModalReducer","ReactDOM","render","maxSnack","getElementById"],"mappings":"oPAMMA,EAAqBC,YAAY,CACrCC,KAAM,gBACNC,aANmB,CACnBC,MAAO,IAMPC,SAAU,CACRC,kBAAmB,SAACC,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC3BD,EAAMH,MAAMK,KAAKD,IAEnBE,oBAAqB,SAACH,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC7B,MAAO,CACLJ,MAAOG,EAAMH,MAAMO,QACjB,SAACC,GAAD,OAAkBA,EAAaC,MAAQL,UAOlCR,IAAf,Q,EAKIA,EAAmBc,QAFrBR,E,EAAAA,kBACAI,E,EAAAA,oBCtBEK,EAAY,GA+CDC,EA7CE,WACf,IAAMC,EAAWC,cACXC,EAAgBC,aAAY,SAACC,GAAD,OAAWA,EAAMF,cAAcf,SAF5C,EAGsBkB,cAAnCC,EAHa,EAGbA,gBAAiBC,EAHJ,EAGIA,cAuCzB,OA7BAC,qBAAU,WACRN,EAAcO,SACZ,YAAwD,IAVpCC,EAUjBd,EAAoD,EAApDA,IAAKe,EAA+C,EAA/CA,QAA+C,IAAtCC,eAAsC,MAA5B,GAA4B,MAAxBC,eAAwB,SAEnDN,EAAcX,GAIZE,EAAUgB,SAASlB,KAEvBU,EAAgBK,EAAD,YAAC,aACdf,OACGgB,GAFU,IAGbG,QAAS,SAACC,EAAOC,EAAQC,GACnBN,EAAQG,SACVH,EAAQG,QAAQC,EAAOC,EAAQC,IAGnCC,SAAU,SAACH,EAAOE,GAtBF,IAACR,EAuBfV,EAASP,EAAoByB,IAvBdR,EAwBCQ,EAvBxBpB,EAAS,YAAOA,EAAUJ,QAAO,SAACE,GAAD,OAASc,IAAOd,UAL3Bc,EAgCHd,EA/BnBE,EAAS,sBAAOA,GAAP,CAAkBY,UAkC1B,CAACR,EAAeK,EAAeD,EAAiBN,IAE5C,M,4EC5CHoB,EAAU,uCAAG,uCAAAC,EAAA,6DAASC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,OAAQC,EAA/B,EAA+BA,KAC5CC,EAJa,qDAIMH,EAHH,iBAKhBC,GACFG,OAAOC,QAAQJ,GAAQf,SAAQ,mCAAEb,EAAF,KAAOiC,EAAP,YAAiBH,GAAG,WAAQ9B,EAAR,YAAeiC,MAJnD,SAMMC,eAAK,CAC1BJ,MACAJ,SACAS,aAAa,EACbC,SAAU,sBACVC,aAAa,EACbC,aAAa,EACbT,OACAU,SAAU,SAdK,cAMXC,EANW,yBAiBVA,GAjBU,2CAAH,sDAoBVC,EAAM,SAAC,GAAsB,IAApBd,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACnB,OAAOJ,EAAW,CAAEE,OAAQ,MAAOC,OAAMC,YAGrCc,EAAO,SAAC,GAAoB,IAAlBf,EAAiB,EAAjBA,KAAME,EAAW,EAAXA,KACdc,EAAO,IAAIC,SAMjB,OAJAb,OAAOC,QAAQH,GAAMhB,SAAQ,YAAiB,IAAD,mBAAdb,EAAc,KAATiC,EAAS,KAC3CU,EAAKE,OAAO7C,EAAKiC,MAGZT,EAAW,CAAEE,OAAQ,OAAQC,OAAME,KAAMc,KAGrCG,EAAW,eAAClB,EAAD,uDAAU,CAAEmB,KAAM,GAAlB,OAA0BN,EAAI,CAAEd,KAAM,IAAKC,YAOtDoB,EAAoB,SAAC,EAAWC,GAAW,IAApBC,EAAmB,EAAnBA,MAClC,OAAOC,QAAQC,IAAIH,EAAMI,KAAI,SAACC,GAAD,OAJP,SAAC,EAAWA,GAAZ,IAAGJ,EAAH,EAAGA,MAAH,OACtBR,EAAK,CAAEf,KAAK,SAAD,OAAW2B,EAAKxC,IAAMe,KAAK,2BAAMyB,GAAP,IAAaJ,YAGXK,CAAS,CAAEL,SAASI,QC1ChDE,EAAgC,SAACpD,EAAUqD,EAAQC,GAC9D,IAAMC,IAAkBF,EAAOG,OACzBC,EAAUF,EACS,OAArBF,EAAO,GAAGK,OACQ,OAAlBL,EAAOK,OAELC,GAAiBJ,EAAgBF,EAAO,GAAKA,GAAQ1C,QAE3DX,EACEX,EAAkB,CAChBsB,QAAS8C,EAAUH,EAAH,iBAAwBM,KAAKC,UAAUF,IACvD/D,KAAK,IAAIkE,MAAOC,UAAYC,KAAKC,SACjCrD,QAAS,CACPsD,QAAST,EAAU,UAAY,aAM1BU,EAAqB,WAChC,OACEC,SAASC,OACNC,MAAM,KACNC,MAAK,SAACC,GAAD,OAASA,EAAIC,OAAOC,WAAW,YACpCJ,MAAM,KAAK,IAAM,IAIXK,EAAmB,SAAC7B,GAC/BsB,SAASC,OAAT,gBAA2BvB,EAA3B,aChCI8B,EAAa5F,YAAY,CAC7BC,KAAM,QACNC,aAAc,CACZ2F,MAAM,GAERzF,SAAU,CACR0F,YAAa,iBAAO,CAAED,MAAM,IAC5BE,YAAa,iBAAO,CAAEF,MAAM,OAIjBD,IAAf,Q,EAE4CA,EAAW/E,QAAxCiF,E,EAAAA,YAAaC,E,EAAAA,YCCfC,EAAaC,YACxB,oBADwC,uCAExC,WAAOzD,EAAP,4BAAAH,EAAA,6DAAiB6D,EAAjB,EAAiBA,SAAjB,EACkDA,IAAWC,eAAnDC,EADV,EACUA,QAASC,EADnB,EACmBA,cAAeC,EADlC,EACkCA,YAC1BjC,EAASX,EAAS,CACtBC,KAAM2C,EACNC,WAAYH,EACZI,eAAgBH,IALpB,kBAOShC,GAPT,2CAFwC,yDAa7BoC,EAAiBR,YAC5B,oBAD4C,uCAE5C,WAAO/B,EAAP,sBAAA7B,EAAA,6DAAerB,EAAf,EAAeA,SACP0F,EADR,2BAC6BxC,GAD7B,IACmCyC,KAAMzC,EAAKyC,KAAKlB,UAC3CpB,EHQ0Bf,EAAK,CAAEf,KAAM,UAAWE,KGR9BiE,KACnBE,MAAK,SAACC,GACXzC,EACEpD,EACA6F,EACA,gCAEiB,OAAfA,EAAInC,SACN1D,EAAS+E,KACT/E,EAASgF,SAXf,kBAcS3B,GAdT,2CAF4C,yDAoBjCyC,EAAab,YACxB,mBADwC,uCAExC,WAAOzD,EAAP,gCAAAH,EAAA,6DAAiBrB,EAAjB,EAAiBA,SAAUkF,EAA3B,EAA2BA,SACnB5F,EAAQ4F,IACRpC,EAAQqB,IAEN4B,EAAiBzG,EAAMuD,MAAvBkD,aACFC,EAAiBD,EAAa9C,KAAI,SAACC,GAAD,mBAAC,eACpCA,GADmC,IAEtCyC,KAAMzC,EAAKyC,KAAKlB,YAGZwB,EAAaF,EAAavC,QAC1BH,EAAST,EAAkB,CAAEE,SAASkD,IACrCJ,MAAK,SAACC,GACXzC,EACEpD,EACA6F,EACe,IAAfI,EAAA,eACYF,EAAa,GAAGrF,GAD5B,+BAEOuF,EAFP,gCAhBN,kBAqBS5C,GArBT,2CAFwC,yDA2BpC6C,EAAalH,YAAY,CAC7BC,KAAM,QACNC,aAtEmB,CACnBC,MAAO,GACP4G,aAAc,GACdrC,OAAQ,OACRyC,MAAO,KACPC,WAAY,GAkEZhH,SAAU,CACRiH,kBAAmB,SAAC/G,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC3BD,EAAMH,MAAQG,EAAMH,MAAM8D,KAAI,SAACC,GAAD,OAC5BA,EAAKxC,KAAOnB,EAAQmB,GAAKnB,EAAU2D,KAErC5D,EAAMyG,aAAN,sBACKzG,EAAMyG,aAAarG,QAAO,SAACwD,GAAD,OAAUA,EAAKxC,KAAOnB,EAAQmB,OAD7D,CAEEnB,KAGJ+G,eAAgB,SAAChH,GAAD,mBAAC,eAAgBA,GAAjB,IAAwB6G,MAAO,SAEjDI,eAAa,mBACVvB,EAAWwB,WAAY,SAAClH,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACxBoB,EAAoBpB,EAApBoB,QAAS+C,EAAWnE,EAAXmE,OAEjB,GADApE,EAAMoE,OAASA,EACA,UAAXA,EAAoBpE,EAAM6G,MAAQxF,MACjC,CAAC,IACIkC,EAA4BlC,EAA5BkC,MAAO4D,EAAqB9F,EAArB8F,iBACfnH,EAAMH,MAAN,YAAkB0D,GAClBvD,EAAM8G,WAAaK,MARZ,cAWVhB,EAAee,WAAY,SAAClH,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QAC5BoB,EAAoBpB,EAApBoB,QAAS+C,EAAWnE,EAAXmE,OACjBpE,EAAMoE,OAASA,EACA,UAAXA,EACFpE,EAAM6G,MAAQxF,EACLrB,EAAMkE,OAAS,GAAGlE,EAAMH,MAAMK,KAAKmB,MAhBrC,cAkBVmF,EAAWU,WAAY,SAAClH,EAAD,GAAwB,EAAdC,QACCmH,OAAM,SAACC,GAAD,MAAwB,OAAfA,EAAIjD,YAC9BpE,EAAMyG,aAAe,OApBlC,KAyBAG,IAAf,Q,EAEqDA,EAAWrG,QAAjDwG,E,EAAAA,kBAAmBC,E,EAAAA,eAErBM,EAAkB,SAACtH,GAAD,MAAY,CACzCuD,MAAOvD,EAAMuD,MAAM1D,MACnB0H,MAAOvH,EAAMuD,MAAMuD,aAMRU,EAAqB,SAACxH,GAAD,OAAWA,EAAMuD,MAAMkD,cC9H5CgB,EAAgB,SAACC,GAC5B,OAAsB,IAAlBA,EAAOxD,OAAqB,cHAhC,mDAAmDyD,KGC3BD,GAEV,GADL,2BAIEE,GAAmB,SAACC,GAC/B,OAAwB,IAApBA,EAAS3D,OAAqB,iBACzB2D,EAAS3D,OAAS,EAAU,wBAC5B2D,EAAS3D,OAAS,GAAW,uBAC1B,IAGD4D,GAAe,SAACC,GAAD,OAAc,SAAC1B,GACzC,OAAoB,IAAhBA,EAAKnC,OAAqB6D,EAClB,K,UChBDC,GAAwBC,aAAW,CAC9CC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAElBC,QAAS,CACPC,QAAS,UAIAC,GAAqBP,aAAW,CAC3CQ,eAAgB,CACdC,OAAQ,KAEVC,UAAW,CACTC,SAAU,YAEZC,aAAc,CACZV,QAAS,OACTW,MAAO,OACPT,eAAgB,gBAChBU,QAAS,GACTC,OAAQ,QAEVC,OAAQ,CACNC,YAAa,IAEfC,WAAY,GACZC,UAAW,CACTN,MAAO,OACPO,OAAQ,U,sCC/BCC,GAAgBrB,cAAW,SAACsB,GAAD,MAAY,CAClDtG,KAAM,CACJuG,WAAY,QACZC,aAAc,EACdC,SAAU,IACVC,UAAWJ,EAAMK,QAAQ,KAE3BC,OAAQ,CACNC,gBAAiBP,EAAMQ,QAAQC,UAAUC,MACzClB,QAAS,SACTU,aAAc,eAEhBS,KAAM,CACJnB,QAAS,cACTZ,QAAS,OACTgC,cAAe,UAEjBC,MAAO,CACLC,UAAW,QAEbC,SAAU,CACRR,gBAAiB,mBC+ENS,GAjGY,SAAC,GAMrB,IAAD,IALJC,yBAKI,MALgB,KAKhB,MAJJC,aAII,MAJI,GAIJ,EAHJC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,SACAC,EACI,EADJA,OAEMC,EAASvB,KACTwB,EAAaC,mBAAQ,kBAAM1I,OAAO2I,KAAKN,MAEvCO,EAAoB,kBACxBH,EAAWI,QAAO,SAACC,EAAK7K,GAAN,mBAAC,eAAmB6K,GAApB,kBAA0B7K,EAAM,OAAO,KALvD,EAO0C8K,mBAASH,KAPnD,mBAOGI,EAPH,KAOoBC,EAPpB,OAQ8BF,mBAASH,KARvC,mBAQGM,EARH,KAQcC,EARd,KAUEC,EAAqB,SAACC,EAAOpL,EAAKqL,GAAb,OACzBD,GAAM,SAACE,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBtL,EAAMqL,QAO/BE,EAAwB,SAACC,EAAGxL,GAChCwL,EAAEC,iBANkB,SAACzL,EAAKqL,GAC1BF,EAAmBH,EAAoBhL,EAAKqL,GAM5CK,CAAc1L,EAAKwL,EAAEG,OAAON,OAC5BH,EAAaP,MAGf/J,qBAAU,WACRsK,EAAa,2BAAKD,GAAcX,MAC/B,CAACA,IAEJ,IAAMsB,EAAqB,WACzB,IAAI3E,EAAQ,EASZ,OARAuD,EAAW3J,SAAQ,SAACb,GAClB,IAAM6L,EAAWzB,EAAiBpK,GAAK8L,UACjCC,EAAehB,EAAgB/K,GACrC,GAAK6L,EAAL,CACA,IAAMG,EAAYH,EAASE,GACvBC,GAAW/E,IApBG,SAACjH,EAAKqL,GAC1BF,EAAmBD,EAAclL,EAAKqL,GAoBpCY,CAAcjM,EAAKgM,OAEd/E,GAaT,OACE,eAACiF,GAAA,EAAD,CAAaC,UAAW5B,EAAO5H,KAA/B,UACGwH,GACC,qBAAKgC,UAAW5B,EAAOhB,OAAvB,SACE,6BAAKY,MAGT,sBAAKgC,UAAW5B,EAAOX,KAAvB,UACGY,EAAWnH,KAAI,SAACrD,GAAD,OACd,cAACoM,GAAA,EAAD,aAEED,UAAW5B,EAAOT,MAClBxF,QAAQ,WACR+H,MAAOpB,EAAUjL,IAAQsM,aAAWtM,GACpCqL,MAAON,EAAgB/K,GACvBuM,SAAU,SAACf,GAAD,OAAOD,EAAsBC,EAAGxL,IAC1CuG,QAAS0E,EAAUjL,IArBE,SAACA,GAAD,OAC7BoK,EAAiBpK,IAAQoK,EAAiBpK,GAAKwM,MAC3CpC,EAAiBpK,GAAKwM,MACtB,GAmBQC,CAAuBzM,IAPtBA,MAUT,cAAC0M,GAAA,EAAD,CACEP,UAAW5B,EAAOT,MAClBxF,QAAQ,WACRqI,QAjCY,WACdf,IAAuB,GACvBvB,GAAUA,EAASU,IA4BnB,SAKGb,WCxBI0C,GAlDM,WACnB,IAAM3H,EAAO1E,aAAY,SAACb,GAAD,OAAWA,EAAMmN,aAAa5H,QACjDqF,EAAS/J,aAAY,SAACb,GAAD,OAAWA,EAAMuD,MAAMsD,SAC5CnG,EAAWC,cACXkK,EAAS7C,KAWT0C,EAAmB,CACvB7C,SAAU,CAAEuE,UAAWxE,IACvBwF,MAAO,CAAEhB,UAAW3E,GACpBpB,KAAM,CACJ+F,UAAWtE,GAAa,8BACxBgF,MAAO,CACLO,WAAW,EACXC,KAAM,EACNC,QAAS,KAKf,OACE,cAACC,EAAA,EAAD,CACEjI,KAAMA,EACN9D,QArBgB,WAClBf,EAAS+E,KACT/E,EAASsG,MAoBPyF,UAAW5B,EAAO3C,MAClBuF,sBAAoB,EAJtB,SAME,cAACC,EAAA,EAAD,CAAMC,GAAIpI,EAAV,SACE,cAACqI,EAAA,EAAD,CAAKnB,UAAW5B,EAAOvC,QAAvB,SACE,cAAC,GAAD,CACEoC,iBAAkBA,EAClBE,OAAQA,EACRD,SAlCW,SAACxI,GACpBzB,EAASyF,EAAehE,KAkChBsI,MAAM,eACND,kBAAkB,e,0FCjDxB5K,GAAe,CACnBiO,WAHkBhJ,IAGMX,OACxBE,OAAQ,OACRyC,MAAO,MAGIiH,GAAanI,YAAiB,gBAAD,uCAAkB,WAAOzD,GAAP,SAAAH,EAAA,+ETsC7BiB,EAAK,CAAEf,KAAM,SAAUE,KSrCvCD,KAD6C,2CAAlB,uDAIpC6L,GAAgBrO,YAAY,CAChCC,KAAM,OACNC,gBACAE,SAAU,CACRkO,UAAW,SAAChO,GACVqF,EAAiB,IACjBrF,EAAM6N,UAAW,GAEnB7G,eAAgB,SAAChH,GAAD,mBAAC,eAAgBA,GAAjB,IAAwB6G,MAAO,SAEjDI,cAAc,eACX6G,GAAW5G,WAAY,SAAClH,EAAD,GAAyB,IAAfC,EAAc,EAAdA,QACxBmE,EAAoBnE,EAApBmE,OAAQ/C,EAAYpB,EAAZoB,QAGhB,GAFArB,EAAMoE,OAASA,EAEA,UAAXA,EAAoBpE,EAAM6G,MAAQxF,MACjC,CAAC,IACImC,EAAUnC,EAAVmC,MACR6B,EAAiB7B,GACbA,EAAMU,OAAS,IAAGlE,EAAM6N,UAAW,SAMhCE,MAAf,Q,GAE6CA,GAAcxN,QAA5CyN,G,GAAAA,UAAWhH,G,GAAAA,eAEbiH,GAAiB,SAACjO,GAAD,OAAWA,EAAMkO,KAAKL,UCrC9CM,GAAiBzO,YAAY,CACjCC,KAAM,iBACNC,aARmB,CACnBkG,QAAS,KACTC,cAAe,OACfC,YAAa,GAMblG,SAAU,CACRsO,eAAgB,SAACpO,EAAD,OAAUC,EAAV,EAAUA,QAAV,mBAAC,eACZD,GADW,IAEd8F,QAAS7F,KAEXoO,qBAAsB,SAACrO,EAAD,OAAUC,EAAV,EAAUA,QAAV,mBAAC,eAClBD,GADiB,IAEpB+F,cAAe9F,KAEjBqO,mBAAoB,SAACtO,EAAD,OAAUC,EAAV,EAAUA,QAAV,mBAAC,eAChBD,GADe,IAElBgG,YAAa/F,QAKJkO,MAAf,Q,GAMIA,GAAe5N,QAHjB6N,G,GAAAA,eACAC,G,GAAAA,qBACAC,G,GAAAA,mBAGWC,GAAsB,SAACvO,GAAD,OAAWA,EAAM6F,gBCnCvC2I,GAAU,CACrB,CACE7B,MAAO,KACP8B,UAAU,EACV3F,MAAO,IAET,CACE6D,MAAO,WACP8B,UAAU,EACV3F,MAAO,KAET,CACE6D,MAAO,QACP8B,UAAU,EACV3F,MAAO,KAET,CACE6D,MAAO,OACP8B,UAAU,EACV3F,MAAO,KAET,CACE6D,MAAO,SACP8B,UAAU,EACV3F,MAAO,MAIL4F,GAAY,SAACC,EAAQC,GAAT,MAAmB,CAAED,SAAQC,SCOzCC,IDJDH,IAAU,GAAO,GACjBA,IAAU,GAAM,GACfA,IAAU,GAAO,GACjBA,IAAU,GAAM,GCCO,SAACtK,GAE5B,OAD8C,IAA1B0K,OAAO1K,GAAQF,OACd,IAAME,EAAS0K,OAAO1K,KAGvC2K,GAAe,SAAC3K,EAAD,GAA+B,IAApBuK,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAClCI,EAAYH,GAAqBzK,GAIrC,MAHsB,qBAAXuK,IAAwBK,EAAYA,EAAU,GAAKC,OAAON,IACjD,qBAATC,IAAsBI,EAAYC,OAAOL,GAAQI,EAAU,IAE/DC,OAAOD,IAGVE,GAAwB,SAAC9K,GAC7B,IAAM+K,EAAoBN,GAAqBzK,GAC/C,MAAO,CACLwK,KAA+B,MAAzBO,EAAkB,GACxBR,OAAiC,MAAzBQ,EAAkB,KAoJfC,GAhJG,WAChB,IAAMvE,EAASrC,KACT9H,EAAWC,cAFK,EAG0BE,YAC9C0N,IADMzI,EAHc,EAGdA,QAASC,EAHK,EAGLA,cAAeC,EAHV,EAGUA,YAI1B6H,EAAWhN,YAAYoN,IACvBoB,EAAexO,YAAY2G,GARX,EASG3G,YAAYyG,GAA7B/D,EATc,EASdA,MAAOgE,EATO,EASPA,MACT+H,EAAY5K,KAAK6K,KAAKhI,EAAQ,GAc9BiI,EAAoB,SAAC5L,GACzBlD,EAASqG,EAAkBnD,KAyB7B,OAJA1C,qBAAU,WACRR,EAASgF,OACR,CAACM,EAAaD,EAAeD,IAG9B,eAAC8H,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,CAAKnB,UAAW5B,EAAOhC,aAAvB,UACE,eAAC+E,EAAA,EAAD,WACE,cAACZ,GAAA,EAAD,CACEP,UAAW5B,EAAO5B,OAClBrE,QAAQ,WACRqI,QAvCc,kBAAMvM,EAAS8E,MAwC7BiK,QAAS,sBAAMhD,UAAU,iBAAhB,sBAJX,sBAQC4C,EAAanL,OAAS,GACrB,cAAC8I,GAAA,EAAD,CACEP,UAAW5B,EAAO5B,OAClBrE,QAAQ,WACRqI,QAxBQ,WAClBvM,EAAS8F,MAwBCiJ,QAAS,sBAAMhD,UAAU,iBAAhB,kBAJX,qBAUH6C,EAAY,GACX,cAACI,GAAA,EAAD,CACEjD,UAAW5B,EAAO1B,WAClB5B,MAAO+H,EACPK,MAAM,UACN9C,SA1De,SAACf,EAAGvJ,GAC3B7B,EAAS4N,GAAmB/L,UA6DzBgB,GAASA,EAAMW,OACd,cAAC0L,GAAA,EAAD,CAAgBnD,UAAW5B,EAAOpC,eAAlC,SACE,eAACoH,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,UACE,cAACC,GAAA,EAAD,UACGvB,GAAQ7K,KAAI,SAACqM,GAAD,OACX,cAACC,GAAA,EAAD,CAA4BnH,MAAOkH,EAAKlH,MAAxC,SACGkH,EAAKvB,SACJ,cAACyB,GAAA,EAAD,CACEC,OAAQrK,IAAYkK,EAAKrD,MACzByD,UAAWrK,EACXkH,QAAS,kBAjFA7L,EAiF4B4O,EAAKrD,WAhF1CjM,EAAhBoF,IAAY1E,EAAagN,GAAehN,GAEjCiN,GAAuC,SAAlBtI,EAA2B,MAAQ,SAHvC,IAAC3E,GA8EX,SAKG4O,EAAKrD,QAGRqD,EAAKrD,OAVOqD,EAAKrD,cAgB3B,cAAC0D,GAAA,EAAD,CAAW5D,UAAW5B,EAAOlC,UAA7B,SACGpF,EAAMI,KAAI,SAACC,GAAD,OACT,eAACmM,GAAA,EAAD,WACE,cAACE,GAAA,EAAD,UAAYrM,EAAKxC,KACjB,cAAC6O,GAAA,EAAD,UAAYrM,EAAKiE,WACjB,cAACoI,GAAA,EAAD,UAAYrM,EAAKwJ,QACjB,cAAC6C,GAAA,EAAD,UACE,cAACvD,GAAA,EAAD,CACED,UAAW5B,EAAOzB,UAClBxE,QAAQ,WACR+G,MAAO/H,EAAKyC,KACZsG,MACEuC,GAAsBtL,EAAKQ,QAAQuK,OAC/B,kBACA,GAENtB,WAAS,EACTE,QAAS,EACT+C,UAAWzC,EACXhB,SAAU,SAACf,GAAD,OAhGL,SAACA,EAAGlI,GAC3B4L,EAAkB,2BACb5L,GADY,IAEfyC,KAAMyF,EAAEG,OAAON,MACfvH,OAAQ2K,GAAanL,EAAKQ,OAAQ,CAAEuK,QAAQ,OA4FX4B,CAAiBzE,EAAGlI,QAGzC,cAACqM,GAAA,EAAD,UACE,cAACO,GAAA,EAAD,CACEC,QAASvB,GAAsBtL,EAAKQ,QAAQwK,KAC5C3B,QAAS,SAACnB,GAAD,OA9FD,SAACA,EAAGlI,GAC9B4L,EAAkB,2BACb5L,GADY,IAEfQ,OAAQ2K,GAAanL,EAAKQ,OAAQ,CAAEwK,KAAM9C,EAAEG,OAAOwE,aA2FnBC,CAAoB5E,EAAGlI,IACvC0M,UAAWzC,QAxBFjK,EAAKxC,cAgC1B,KACJ,cAAC,GAAD,Q,oBCrISuP,GAtDM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUrL,EAAoB,EAApBA,KAAM9D,EAAc,EAAdA,QAChCf,EAAWC,cACXiK,EAAS/J,aAAY,SAACb,GAAD,OAAWA,EAAMkO,KAAKrH,SAC3C6D,EAAmB,CACvB7C,SAAU,CAAEuE,UAAWxE,IACvBiJ,SAAU,CACRzE,UAAWtE,GAAa,kBACxBgF,MAAO,CAAEgE,KAAM,cAeb1P,EAAKmE,EAAO,sBAAmBwL,EACrC,OACE,cAACC,GAAA,EAAD,CACE5P,GAAIA,EACJmE,KAAMA,EACNqL,SAAUA,EACVnP,QAXgB,WAClBA,IACAf,EAASsG,OAUPiK,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,SAXhB,SAcE,cAAC,GAAD,CACE3G,kBAAkB,SAClBE,iBAAkBA,EAClBC,SA9Be,SAACxI,GACpBzB,EAASoN,GAAW3L,IAAOmE,MAAK,YACf,OAD4C,EAA1BrG,QAAWmE,QACrB3C,GAASA,QA6B9BmJ,OAAQA,OChDHyG,GAAepJ,aAAW,CACrCiC,KAAM,CACJ/B,QAAS,OACTmJ,WAAY,IACZxI,MAAO,OACPT,eAAgB,SAChBkJ,SAAU,wBAIDC,GAAkBvJ,cAAW,SAACsB,GAAD,MAAY,CACpDM,OAAQ,CACNjB,SAAU,QACVT,QAAS,OACTE,eAAgB,gBAChBD,WAAY,SACZU,MAAO,OACPC,QAAS,OACTe,gBAAiBP,EAAMQ,QAAQC,UAAUC,OAE3CwH,KAAM,CACJC,cAAe,YCuCJC,IDnCsB1J,aAAW,CAC9C2J,aAAc,CACZzJ,QAAS,OACTgC,cAAe,SACfpB,QAAS,SACTW,SAAU,OCzBC,WACb,IAAMmE,EAAWhN,YAAYoN,IACvBvN,EAAWC,cAFE,EAGakR,IAAMzG,SAAS,MAH5B,mBAGZwF,EAHY,KAGFkB,EAHE,OAI6BD,IAAMzG,UAAS,GAJ5C,mBAIZ2G,EAJY,KAIMC,EAJN,KAKbnH,EAAS2G,KAef,OACE,eAAC5D,EAAA,EAAD,CAAKnB,UAAW5B,EAAOhB,OAAvB,UACE,cAACoI,GAAA,EAAD,CAAYrN,QAAQ,KAAK6H,UAAW5B,EAAO4G,KAA3C,wBAGA,8BACG5D,EACC,cAACb,GAAA,EAAD,CACEC,QAhBW,WACnBvM,EAASsN,OAgBDkE,eAAa,EACbzC,QAAS,sBAAMhD,UAAU,iBAAhB,oBAHX,qBAQA,qCACE,cAACO,GAAA,EAAD,CACEC,QA9BQ,SAACnB,GACnBgG,EAAYhG,EAAEqG,eACdH,GAAoB,SAACpG,GAAD,OAAWA,MA6BrBsG,eAAa,EACbzC,QAAS,sBAAMhD,UAAU,iBAAhB,mBAHX,oBAOA,cAAC,GAAD,CACEmE,SAAUA,EACVrL,KAAMwM,EACNtQ,QA9BoB,WAC9BuQ,GAAoB,gBCLTI,GAbH,WACV,IAAMvH,EAASwG,KACf,OACE,sBAAK5E,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,GAAD,IACA,qBAAKA,UAAW5B,EAAOX,KAAvB,SACE,cAAC,GAAD,UCNOmI,eAAe,CAC5BC,QAAS,CACP/O,MAAOgP,EACP1M,eAAgB2M,GAChBrF,aAAcsF,EACdvE,KAAMH,GACNnN,cAAenB,KCLnBiT,IAASC,OACP,cAAC,IAAD,CAAU7R,MAAOA,GAAjB,SACE,cAAC,IAAD,CAAkB8R,SAAU,EAA5B,SACE,cAAC,GAAD,QAGJ9N,SAAS+N,eAAe,W","file":"static/js/main.08f7aca4.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  items: [],\n};\n\nconst notificationsSlice = createSlice({\n  name: \"notifications\",\n  initialState,\n  reducers: {\n    notificationAdded: (state, { payload }) => {\n      state.items.push(payload);\n    },\n    notificationRemoved: (state, { payload }) => {\n      return {\n        items: state.items.filter(\n          (notification) => notification.key !== payload\n        ),\n      };\n    },\n  },\n});\n\nexport default notificationsSlice.reducer;\n\nexport const {\n  notificationAdded,\n  notificationRemoved,\n} = notificationsSlice.actions;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useSnackbar } from \"notistack\";\nimport { notificationRemoved } from \"./notificationsSlice\";\n\nlet displayed = [];\n\nconst Notifier = () => {\n  const dispatch = useDispatch();\n  const notifications = useSelector((store) => store.notifications.items);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const storeDisplayed = (id) => {\n    displayed = [...displayed, id];\n  };\n\n  const removeDisplayed = (id) => {\n    displayed = [...displayed.filter((key) => id !== key)];\n  };\n\n  useEffect(() => {\n    notifications.forEach(\n      ({ key, message, options = {}, dismissed = false }) => {\n        if (dismissed) {\n          closeSnackbar(key);\n          return;\n        }\n\n        if (displayed.includes(key)) return;\n\n        enqueueSnackbar(message, {\n          key,\n          ...options,\n          onClose: (event, reason, myKey) => {\n            if (options.onClose) {\n              options.onClose(event, reason, myKey);\n            }\n          },\n          onExited: (event, myKey) => {\n            dispatch(notificationRemoved(myKey));\n            removeDisplayed(myKey);\n          },\n        });\n\n        storeDisplayed(key);\n      }\n    );\n  }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\n\n  return null;\n};\n\nexport default Notifier;\n","import { ajax } from \"jquery\";\n\nconst baseApiUrl = \"https://uxcandy.com/~shapoval/test-task-backend/v2\";\nconst defualtParams = \"?developer=beb\";\n\nconst fetchAsDev = async ({ method, path, params, data }) => {\n  let url = baseApiUrl + path + defualtParams;\n\n  if (params)\n    Object.entries(params).forEach(([key, val]) => (url += `&${key}=${val}`));\n\n  const response = await ajax({\n    url,\n    method,\n    crossDomain: true,\n    mimeType: \"multipart/form-data\",\n    contentType: false,\n    processData: false,\n    data,\n    dataType: \"json\",\n  });\n\n  return response;\n};\n\nconst get = ({ path, params }) => {\n  return fetchAsDev({ method: \"GET\", path, params });\n};\n\nconst post = ({ path, data }) => {\n  const form = new FormData();\n\n  Object.entries(data).forEach(([key, val]) => {\n    form.append(key, val);\n  });\n\n  return fetchAsDev({ method: \"POST\", path, data: form });\n};\n\nexport const getTasks = (params = { page: 1 }) => get({ path: \"/\", params });\n\nexport const createTask = (data) => post({ path: \"/create\", data });\n\nexport const editTask = ({ token }, task) =>\n  post({ path: `/edit/${task.id}`, data: { ...task, token } });\n\nexport const editMultipleTasks = ({ token }, tasks) => {\n  return Promise.all(tasks.map((task) => editTask({ token }, task)));\n};\n\nexport const login = (data) => post({ path: \"/login\", data });\n","import { notificationAdded } from \"../features/notifications/notificationsSlice\";\n\nexport const stringIsEmail = (str) =>\n  /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/.test(str);\n\nexport const dispatchNotificationForResult = (dispatch, result, _message) => {\n  const resultIsArray = !!result.length;\n  const success = resultIsArray\n    ? result[0].status === \"ok\"\n    : result.status === \"ok\";\n\n  const resultMessage = (resultIsArray ? result[0] : result).message;\n\n  dispatch(\n    notificationAdded({\n      message: success ? _message : `ERROR: ${JSON.stringify(resultMessage)}`,\n      key: new Date().getTime() + Math.random(),\n      options: {\n        variant: success ? \"success\" : \"error\",\n      },\n    })\n  );\n};\n\nexport const getTokenFromCookie = () => {\n  return (\n    document.cookie\n      .split(\";\")\n      .find((row) => row.trim().startsWith(\"token\"))\n      .split(\"=\")[1] || \"\"\n  );\n};\n\nexport const putTokenInCookie = (token) => {\n  document.cookie = `token=${token}; path=/`;\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst modalSlice = createSlice({\n  name: \"modal\",\n  initialState: {\n    open: false,\n  },\n  reducers: {\n    modalOpened: () => ({ open: true }),\n    modalClosed: () => ({ open: false }),\n  },\n});\n\nexport default modalSlice.reducer;\n\nexport const { modalOpened, modalClosed } = modalSlice.actions;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getTasks, createTask, editMultipleTasks } from \"../../utils/api\";\nimport {\n  dispatchNotificationForResult,\n  getTokenFromCookie,\n} from \"../../utils/helpers\";\nimport { modalClosed } from \"./taskModalSlice\";\n\nconst initialState = {\n  items: [],\n  unsavedItems: [],\n  status: \"idle\",\n  error: null,\n  totalItems: 0,\n};\n\nexport const fetchTasks = createAsyncThunk(\n  \"tasks/tasksLoaded\",\n  async (params, { getState }) => {\n    const { orderBy, sortDirection, currentPage } = getState().tasksListState;\n    const result = getTasks({\n      page: currentPage,\n      sort_field: orderBy,\n      sort_direction: sortDirection,\n    });\n    return result;\n  }\n);\n\nexport const newTaskCreated = createAsyncThunk(\n  \"tasks/taskCreated\",\n  async (task, { dispatch }) => {\n    const processedTask = { ...task, text: task.text.trim() };\n    const result = createTask(processedTask);\n    result.then((res) => {\n      dispatchNotificationForResult(\n        dispatch,\n        res,\n        \"New task created successfuly\"\n      );\n      if (res.status === \"ok\") {\n        dispatch(modalClosed());\n        dispatch(fetchTasks());\n      }\n    });\n    return result;\n  }\n);\n\nexport const tasksSaved = createAsyncThunk(\n  \"tasks/tasksSaved\",\n  async (params, { dispatch, getState }) => {\n    const state = getState();\n    const token = getTokenFromCookie();\n\n    const { unsavedItems } = state.tasks;\n    const processedItems = unsavedItems.map((task) => ({\n      ...task,\n      text: task.text.trim(),\n    }));\n\n    const itemsCount = unsavedItems.length;\n    const result = editMultipleTasks({ token }, processedItems);\n    result.then((res) => {\n      dispatchNotificationForResult(\n        dispatch,\n        res,\n        itemsCount === 1\n          ? `Task ${unsavedItems[0].id} has been updated`\n          : `${itemsCount} tasks have been updated`\n      );\n    });\n    return result;\n  }\n);\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    taskEditedLocally: (state, { payload }) => {\n      state.items = state.items.map((task) =>\n        task.id === payload.id ? payload : task\n      );\n      state.unsavedItems = [\n        ...state.unsavedItems.filter((task) => task.id !== payload.id),\n        payload,\n      ];\n    },\n    errorNullified: (state) => ({ ...state, error: null }),\n  },\n  extraReducers: {\n    [fetchTasks.fulfilled]: (state, { payload }) => {\n      const { message, status } = payload;\n      state.status = status;\n      if (status === \"error\") state.error = message;\n      else {\n        const { tasks, total_task_count } = message;\n        state.items = [...tasks];\n        state.totalItems = total_task_count;\n      }\n    },\n    [newTaskCreated.fulfilled]: (state, { payload }) => {\n      const { message, status } = payload;\n      state.status = status;\n      if (status === \"error\") {\n        state.error = message;\n      } else if (state.length < 3) state.items.push(message);\n    },\n    [tasksSaved.fulfilled]: (state, { payload }) => {\n      const everyItemIsSaved = payload.every((msg) => msg.status === \"ok\");\n      if (everyItemIsSaved) state.unsavedItems = [];\n    },\n  },\n});\n\nexport default tasksSlice.reducer;\n\nexport const { taskEditedLocally, errorNullified } = tasksSlice.actions;\n\nexport const selectTasksData = (state) => ({\n  tasks: state.tasks.items,\n  count: state.tasks.totalItems,\n});\n\nexport const selectTodoById = (state, id) =>\n  state.tasks.items.find((todo) => todo.id === id);\n\nexport const selectUnsavedTasks = (state) => state.tasks.unsavedItems;\n","import { stringIsEmail } from \"./helpers\";\n\nexport const validateEmail = (_email) => {\n  if (_email.length === 0) return \"Enter Email\";\n  else if (!stringIsEmail(_email)) {\n    return \"Incorrect email format.\";\n  } else return \"\";\n};\n\nexport const validateUsername = (username) => {\n  if (username.length === 0) return \"Enter Username\";\n  else if (username.length < 3) return \"Username is too short\";\n  else if (username.length > 14) return \"Username is too long\";\n  else return \"\";\n};\n\nexport const validateText = (errormsg) => (text) => {\n  if (text.length === 0) return errormsg;\n  else return \"\";\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useAddTaskModalStyles = makeStyles({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  wrapper: {\n    outline: \"none\",\n  },\n});\n\nexport const useTasksListStyles = makeStyles({\n  tableContainer: {\n    height: 400,\n  },\n  tableBody: {\n    position: \"relative\",\n  },\n  utilsWrapper: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"space-between\",\n    padding: 10,\n    margin: \"auto\",\n  },\n  button: {\n    marginRight: 10,\n  },\n  pagination: {},\n  textField: {\n    width: \"100%\",\n    border: \"none\",\n  },\n});\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useFormStyles = makeStyles((theme) => ({\n  form: {\n    background: \"white\",\n    borderRadius: 5,\n    minWidth: 300,\n    boxShadow: theme.shadows[16],\n  },\n  header: {\n    backgroundColor: theme.palette.secondary.light,\n    padding: \"0 30px\",\n    borderRadius: \"5px 5px 0 0\",\n  },\n  body: {\n    padding: \"0 20px 20px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  input: {\n    marginTop: \"15px\",\n  },\n  backdrop: {\n    backgroundColor: \"transparent\",\n  },\n}));\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport PropType from \"prop-types\";\nimport { TextField, FormControl, Button, capitalize } from \"@material-ui/core\";\nimport { useFormStyles } from \"./styles\";\n\nconst FormWithValidation = ({\n  submitButtonLabel = \"OK\",\n  title = \"\",\n  fieldsOptionsMap,\n  onSubmit,\n  errors,\n}) => {\n  const styles = useFormStyles();\n  const fieldsKeys = useMemo(() => Object.keys(fieldsOptionsMap));\n\n  const getEmptyFieldsMap = () =>\n    fieldsKeys.reduce((acc, key) => ({ ...acc, [key]: \"\" }), {});\n\n  const [fieldsValuesMap, setFieldsValuesMap] = useState(getEmptyFieldsMap());\n  const [errorsMap, setErrorsMap] = useState(getEmptyFieldsMap());\n\n  const updatePrevStateObj = (setFn, key, value) =>\n    setFn((prev) => ({ ...prev, [key]: value }));\n\n  const setFieldValue = (key, value) =>\n    updatePrevStateObj(setFieldsValuesMap, key, value);\n  const setErrorValue = (key, value) =>\n    updatePrevStateObj(setErrorsMap, key, value);\n\n  const handleTextInputChange = (e, key) => {\n    e.preventDefault();\n    setFieldValue(key, e.target.value);\n    setErrorsMap(getEmptyFieldsMap());\n  };\n\n  useEffect(() => {\n    setErrorsMap({ ...errorsMap, ...errors });\n  }, [errors]);\n\n  const getFormErrorsCount = () => {\n    let count = 0;\n    fieldsKeys.forEach((key) => {\n      const validate = fieldsOptionsMap[key].validator;\n      const currentValue = fieldsValuesMap[key];\n      if (!validate) return;\n      const errorText = validate(currentValue);\n      if (errorText) count++;\n      setErrorValue(key, errorText);\n    });\n    return count;\n  };\n\n  const handleClick = () => {\n    if (getFormErrorsCount() > 0) return;\n    if (onSubmit) onSubmit(fieldsValuesMap);\n  };\n\n  const getCustomPropsForInput = (key) =>\n    fieldsOptionsMap[key] && fieldsOptionsMap[key].props\n      ? fieldsOptionsMap[key].props\n      : {};\n\n  return (\n    <FormControl className={styles.form}>\n      {title && (\n        <div className={styles.header}>\n          <h2>{title}</h2>\n        </div>\n      )}\n      <div className={styles.body}>\n        {fieldsKeys.map((key) => (\n          <TextField\n            key={key}\n            className={styles.input}\n            variant=\"outlined\"\n            label={errorsMap[key] || capitalize(key)}\n            value={fieldsValuesMap[key]}\n            onChange={(e) => handleTextInputChange(e, key)}\n            error={!!errorsMap[key]}\n            {...getCustomPropsForInput(key)}\n          />\n        ))}\n        <Button\n          className={styles.input}\n          variant=\"outlined\"\n          onClick={handleClick}\n        >\n          {submitButtonLabel}\n        </Button>\n      </div>\n    </FormControl>\n  );\n};\n\nFormWithValidation.propTypes = {\n  submitButtonLabel: PropType.string,\n  title: PropType.string,\n  fieldsOptionsMap: PropType.object,\n  onSubmit: PropType.func,\n  errors: PropType.object,\n};\n\nexport default FormWithValidation;\n","import React from \"react\";\nimport { Modal, Fade, Box } from \"@material-ui/core\";\nimport { newTaskCreated, errorNullified } from \"./tasksSlice\";\nimport { modalClosed } from \"./taskModalSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  validateEmail,\n  validateUsername,\n  validateText,\n} from \"../../utils/validators\";\nimport { useAddTaskModalStyles } from \"./styles\";\nimport FormWithValidation from \"../formWithValidation/FormWithValidation\";\n\nconst AddTaskModal = () => {\n  const open = useSelector((state) => state.newTaskModal.open);\n  const errors = useSelector((state) => state.tasks.error);\n  const dispatch = useDispatch();\n  const styles = useAddTaskModalStyles();\n\n  const handleSubmit = (data) => {\n    dispatch(newTaskCreated(data));\n  };\n\n  const handleClose = () => {\n    dispatch(modalClosed());\n    dispatch(errorNullified());\n  };\n\n  const fieldsOptionsMap = {\n    username: { validator: validateUsername },\n    email: { validator: validateEmail },\n    text: {\n      validator: validateText(\"This field cannot be empty\"),\n      props: {\n        multiline: true,\n        rows: 3,\n        rowsMax: 5,\n      },\n    },\n  };\n\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      className={styles.modal}\n      closeAfterTransition\n    >\n      <Fade in={open}>\n        <Box className={styles.wrapper}>\n          <FormWithValidation\n            fieldsOptionsMap={fieldsOptionsMap}\n            errors={errors}\n            onSubmit={handleSubmit}\n            title=\"Add new task\"\n            submitButtonLabel=\"Add\"\n          />\n        </Box>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default AddTaskModal;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { login } from \"../../utils/api\";\nimport { getTokenFromCookie, putTokenInCookie } from \"../../utils/helpers\";\n\nconst cookieToken = getTokenFromCookie();\n\nconst initialState = {\n  loggedIn: !!cookieToken.length,\n  status: \"idle\",\n  error: null,\n};\n\nexport const fetchToken = createAsyncThunk(\"auth/loggedIn\", async (params) => {\n  return login(params);\n});\n\nconst userInfoSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    loggedOut: (state) => {\n      putTokenInCookie(\"\");\n      state.loggedIn = false;\n    },\n    errorNullified: (state) => ({ ...state, error: null }),\n  },\n  extraReducers: {\n    [fetchToken.fulfilled]: (state, { payload }) => {\n      const { status, message } = payload;\n      state.status = status;\n\n      if (status === \"error\") state.error = message;\n      else {\n        const { token } = message;\n        putTokenInCookie(token);\n        if (token.length > 0) state.loggedIn = true;\n      }\n    },\n  },\n});\n\nexport default userInfoSlice.reducer;\n\nexport const { loggedOut, errorNullified } = userInfoSlice.actions;\n\nexport const selectLoggedIn = (state) => state.user.loggedIn;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  orderBy: null,\n  sortDirection: \"desc\",\n  currentPage: 1,\n};\n\nconst listStateSlice = createSlice({\n  name: \"tasksListState\",\n  initialState,\n  reducers: {\n    orderByChanged: (state, { payload }) => ({\n      ...state,\n      orderBy: payload,\n    }),\n    sortDirectionChanged: (state, { payload }) => ({\n      ...state,\n      sortDirection: payload,\n    }),\n    currentPageChanged: (state, { payload }) => ({\n      ...state,\n      currentPage: payload,\n    }),\n  },\n});\n\nexport default listStateSlice.reducer;\n\nexport const {\n  orderByChanged,\n  sortDirectionChanged,\n  currentPageChanged,\n} = listStateSlice.actions;\n\nexport const selectTaskListState = (state) => state.tasksListState;\n","export const headers = [\n  {\n    label: \"Id\",\n    sortable: true,\n    width: 75,\n  },\n  {\n    label: \"Username\",\n    sortable: true,\n    width: 125,\n  },\n  {\n    label: \"Email\",\n    sortable: true,\n    width: 160,\n  },\n  {\n    label: \"Text\",\n    sortable: false,\n    width: 240,\n  },\n  {\n    label: \"Status\",\n    sortable: true,\n    width: 100,\n  },\n];\n\nconst getStatus = (edited, done) => ({ edited, done });\n\nexport const statusToFieldsMap = {\n  0: getStatus(false, false),\n  1: getStatus(true, false),\n  10: getStatus(false, true),\n  11: getStatus(true, true),\n};\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport AddTaskModal from \"./AddTaskModal\";\nimport {\n  selectTasksData,\n  fetchTasks,\n  tasksSaved,\n  taskEditedLocally,\n  selectUnsavedTasks,\n} from \"./tasksSlice\";\nimport { modalOpened } from \"./taskModalSlice\";\nimport {\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Button,\n  Checkbox,\n  TextField,\n  TableSortLabel,\n  Box,\n} from \"@material-ui/core\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport { useTasksListStyles } from \"./styles\";\nimport { selectLoggedIn } from \"../auth/userInfoSlice\";\nimport {\n  orderByChanged,\n  sortDirectionChanged,\n  currentPageChanged,\n  selectTaskListState,\n} from \"./tasksListStateSlice\";\nimport { headers } from \"./config\";\n\nconst getDoubleDigitStatus = (status) => {\n  const singleDigit = String(status).length === 1;\n  return singleDigit ? \"0\" + status : String(status);\n};\n\nconst getNewStatus = (status, { edited, done }) => {\n  let newStatus = getDoubleDigitStatus(status);\n  if (typeof edited !== \"undefined\") newStatus = newStatus[0] + Number(edited);\n  if (typeof done !== \"undefined\") newStatus = Number(done) + newStatus[1];\n\n  return Number(newStatus);\n};\n\nconst getTaskInfoFromStatus = (status) => {\n  const doubleDigitStatus = getDoubleDigitStatus(status);\n  return {\n    done: doubleDigitStatus[0] === \"1\",\n    edited: doubleDigitStatus[1] === \"1\",\n  };\n};\n\nconst TasksList = () => {\n  const styles = useTasksListStyles();\n  const dispatch = useDispatch();\n  const { orderBy, sortDirection, currentPage } = useSelector(\n    selectTaskListState\n  );\n\n  const loggedIn = useSelector(selectLoggedIn);\n  const unsavedTasks = useSelector(selectUnsavedTasks);\n  const { tasks, count } = useSelector(selectTasksData);\n  const pageCount = Math.ceil(count / 3);\n\n  const handleSelectSortField = (id) => {\n    if (orderBy !== id) dispatch(orderByChanged(id));\n    else\n      dispatch(sortDirectionChanged(sortDirection === \"desc\" ? \"asc\" : \"desc\"));\n  };\n\n  const handleOpenModal = () => dispatch(modalOpened());\n\n  const handleChangePage = (e, val) => {\n    dispatch(currentPageChanged(val));\n  };\n\n  const updateUnsavedTask = (task) => {\n    dispatch(taskEditedLocally(task));\n  };\n  const handleTextChange = (e, task) => {\n    updateUnsavedTask({\n      ...task,\n      text: e.target.value,\n      status: getNewStatus(task.status, { edited: true }),\n    });\n  };\n\n  const handleCheckboxClick = (e, task) => {\n    updateUnsavedTask({\n      ...task,\n      status: getNewStatus(task.status, { done: e.target.checked }),\n    });\n  };\n\n  const saveChanges = () => {\n    dispatch(tasksSaved());\n  };\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [currentPage, sortDirection, orderBy]);\n\n  return (\n    <Box>\n      <Box className={styles.utilsWrapper}>\n        <Box>\n          <Button\n            className={styles.button}\n            variant=\"outlined\"\n            onClick={handleOpenModal}\n            endIcon={<span className=\"material-icons\">add_task</span>}\n          >\n            New task\n          </Button>\n          {unsavedTasks.length > 0 && (\n            <Button\n              className={styles.button}\n              variant=\"outlined\"\n              onClick={saveChanges}\n              endIcon={<span className=\"material-icons\">save</span>}\n            >\n              Save\n            </Button>\n          )}\n        </Box>\n        {pageCount > 0 && (\n          <Pagination\n            className={styles.pagination}\n            count={pageCount}\n            shape=\"rounded\"\n            onChange={handleChangePage}\n          />\n        )}\n      </Box>\n      {tasks && tasks.length ? (\n        <TableContainer className={styles.tableContainer}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {headers.map((cell) => (\n                  <TableCell key={cell.label} width={cell.width}>\n                    {cell.sortable ? (\n                      <TableSortLabel\n                        active={orderBy === cell.label}\n                        direction={sortDirection}\n                        onClick={() => handleSelectSortField(cell.label)}\n                      >\n                        {cell.label}\n                      </TableSortLabel>\n                    ) : (\n                      cell.label\n                    )}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody className={styles.tableBody}>\n              {tasks.map((task) => (\n                <TableRow key={task.id}>\n                  <TableCell>{task.id}</TableCell>\n                  <TableCell>{task.username}</TableCell>\n                  <TableCell>{task.email}</TableCell>\n                  <TableCell>\n                    <TextField\n                      className={styles.textField}\n                      variant=\"outlined\"\n                      value={task.text}\n                      label={\n                        getTaskInfoFromStatus(task.status).edited\n                          ? \"Edited by admin\"\n                          : \"\"\n                      }\n                      multiline\n                      rowsMax={3}\n                      disabled={!loggedIn}\n                      onChange={(e) => handleTextChange(e, task)}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Checkbox\n                      checked={getTaskInfoFromStatus(task.status).done}\n                      onClick={(e) => handleCheckboxClick(e, task)}\n                      disabled={!loggedIn}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      ) : null}\n      <AddTaskModal />\n    </Box>\n  );\n};\n\nexport default TasksList;\n","import React from \"react\";\nimport { Popover } from \"@material-ui/core\";\nimport PropType from \"prop-types\";\nimport { validateText, validateUsername } from \"../../utils/validators\";\nimport FormWithValidation from \"../formWithValidation/FormWithValidation\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchToken, errorNullified } from \"./userInfoSlice\";\n\nconst LoginPopover = ({ anchorEl, open, onClose }) => {\n  const dispatch = useDispatch();\n  const errors = useSelector((state) => state.user.error);\n  const fieldsOptionsMap = {\n    username: { validator: validateUsername },\n    password: {\n      validator: validateText(\"Enter password\"),\n      props: { type: \"password\" },\n    },\n  };\n\n  const handleSubmit = (data) => {\n    dispatch(fetchToken(data)).then(({ payload: { status } }) => {\n      if (status === \"ok\" && onClose) onClose();\n    });\n  };\n\n  const handleClose = () => {\n    onClose();\n    dispatch(errorNullified());\n  };\n\n  const id = open ? \"simple-popover\" : undefined;\n  return (\n    <Popover\n      id={id}\n      open={open}\n      anchorEl={anchorEl}\n      onClose={handleClose}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"center\",\n      }}\n      transformOrigin={{\n        vertical: \"top\",\n        horizontal: \"right\",\n      }}\n    >\n      <FormWithValidation\n        submitButtonLabel=\"Log in\"\n        fieldsOptionsMap={fieldsOptionsMap}\n        onSubmit={handleSubmit}\n        errors={errors}\n      />\n    </Popover>\n  );\n};\n\nLoginPopover.propTypes = {\n  anchorEl: PropType.object,\n  open: PropType.bool,\n  onClose: PropType.func,\n};\n\nexport default LoginPopover;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useAppStyles = makeStyles({\n  body: {\n    display: \"flex\",\n    paddingTop: 100,\n    width: \"100%\",\n    justifyContent: \"center\",\n    fontSize: \"calc(10px + 2vmin)\",\n  },\n});\n\nexport const useHeaderStyles = makeStyles((theme) => ({\n  header: {\n    position: \"fixed\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    width: \"100%\",\n    padding: \"20px\",\n    backgroundColor: theme.palette.secondary.light,\n  },\n  logo: {\n    pointerEvents: \"none\",\n  },\n}));\n\nexport const useLoginPopoverStyles = makeStyles({\n  loginPopover: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    padding: \"0 20px\",\n    minWidth: 250,\n  },\n});\n","import React from \"react\";\nimport { Box, Button, Typography } from \"@material-ui/core\";\nimport LoginPopover from \"../features/auth/LoginPopover\";\nimport { useHeaderStyles } from \"./styles\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectLoggedIn, loggedOut } from \"../features/auth/userInfoSlice\";\n\nconst Header = () => {\n  const loggedIn = useSelector(selectLoggedIn);\n  const dispatch = useDispatch();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [loginPopoverOpen, setLoginPopoverOpen] = React.useState(false);\n  const styles = useHeaderStyles();\n\n  const handleLogin = (e) => {\n    setAnchorEl(e.currentTarget);\n    setLoginPopoverOpen((prev) => !prev);\n  };\n\n  const handleLogout = () => {\n    dispatch(loggedOut());\n  };\n\n  const handleLoginPopoverClose = () => {\n    setLoginPopoverOpen(false);\n  };\n\n  return (\n    <Box className={styles.header}>\n      <Typography variant=\"h4\" className={styles.logo}>\n        Tasks list\n      </Typography>\n      <div>\n        {loggedIn ? (\n          <Button\n            onClick={handleLogout}\n            disableRipple\n            endIcon={<span className=\"material-icons\">logout</span>}\n          >\n            Log Out\n          </Button>\n        ) : (\n          <>\n            <Button\n              onClick={handleLogin}\n              disableRipple\n              endIcon={<span className=\"material-icons\">login</span>}\n            >\n              Log in\n            </Button>\n            <LoginPopover\n              anchorEl={anchorEl}\n              open={loginPopoverOpen}\n              onClose={handleLoginPopoverClose}\n            />\n          </>\n        )}\n      </div>\n    </Box>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\r\nimport Notifier from \"../features/notifications/Notifier\";\r\nimport TasksList from \"../features/tasksList/TasksList\";\r\nimport Header from \"./Header\";\r\nimport { useAppStyles } from \"./styles\";\r\n\r\nconst App = () => {\r\n  const styles = useAppStyles();\r\n  return (\r\n    <div className=\"App\">\r\n      <Notifier />\r\n      <Header />\r\n      <div className={styles.body}>\r\n        <TasksList />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"../features/tasksList/tasksSlice\";\r\nimport tasksListStateSlice from \"../features/tasksList/tasksListStateSlice\";\r\nimport taskModalReducer from \"../features/tasksList/taskModalSlice\";\r\nimport userInfoSlice from \"../features/auth/userInfoSlice\";\r\nimport notificationsSlice from \"../features/notifications/notificationsSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n    tasksListState: tasksListStateSlice,\r\n    newTaskModal: taskModalReducer,\r\n    user: userInfoSlice,\r\n    notifications: notificationsSlice,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./commonComponents/App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { SnackbarProvider } from \"notistack\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <SnackbarProvider maxSnack={3}>\r\n      <App />\r\n    </SnackbarProvider>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}